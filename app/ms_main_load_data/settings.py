"""
Django settings for ms-main-load-data project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
from celery.schedules import crontab
from .mongo_setup import (
    connect_mongo_dev,
    connect_mongo_prod
)
import os
import environ
import json
import mongoengine
import warnings 
import urllib.parse



# DEBUG = True

env = environ.Env(
    DEBUG=(bool, False)
)

environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1hh=deea+j$skklj#g%n)f0f3l=)%no&9qv+&r9j-p+%1o8$tu'

# SECURITY WARNING: don't run with debug turned on in production!

# LOGGING

# settings.py
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'WARNING', 
            'class': 'logging.FileHandler',
            'filename': 'app.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'ms_main_load_data': {  
            'handlers': ['console', 'file'],
            'level': 'WARNING',  
            'propagate': True,
        },
    },
}


ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])
# ENVIRONMENT = env('ENVIRONMENT', default='DEV')

# if ENVIRONMENT == 'DEV':
#     DEBUG = True
#     ALLOWED_HOSTS = ['*']
# else:
#     DEBUG = False
#     ALLOWED_HOST_REGEXES = [
#         "regex:^172\\.31\\.\\d+\\.\\d+(:\\d+)?$",
#         "regex:^10\\.0\\.\\d+\\.\\d+(:\\d+)?$"
#     ]
#     ALLOWED_HOSTS.extend(ALLOWED_HOST_REGEXES)
    
# print(f'ALLOWED_HOSTS: {ALLOWED_HOSTS}')

CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[])

CSRF_COOKIE_SECURE = False  

CSRF_COOKIE_NAME = 'csrftoken'

CSRF_COOKIE_HTTPONLY = False

CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'

CSRF_COOKIE_SAMESITE = 'Lax'

SESSION_COOKIE_SECURE = False  

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[])

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]

CORS_ALLOW_HEADERS = [
    'Authorization',
    'Content-Type',
    'Accept',
    'x-requested-with',
    'accept',
    'origin',
    'user-agent',
    'dnt',
    'cache-control',
    'X-CSRFToken',
    'x-requested-with',
    'x-xsrf-token',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'rest_framework',
    'rest_framework_mongoengine',
    'ms_app_manage_auth',
    'ms_load_from_zoho',
    'ms_load_from_senitron',
    'ms_load_sequence_tasks',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    'ms_app_manage_auth.middleware.MongoAuthMiddleware',
    'ms_app_manage_auth.middleware.MongoConnectionMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'ms_app_manage_auth.backends.MongoDBBackend',
    # 'django.contrib.auth.backends.ModelBackend',
]

# AUTH_USER_MODEL = 'ms_app_manage_auth.CustomUser'

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

ROOT_URLCONF = 'ms_main_load_data.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ms_main_load_data.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': f'{env('POSTGRES_DB_ENGINE', default="django.db.backends.postgresql_psycopg2")}',
#         'NAME': f'{env('POSTGRES_DB_NAME', default="")}',
#         'USER': f'{env('POSRGRES_DB_USER', default="")}',
#         'PASSWORD': f'{env('POSTGRES_DB_PASSWORD', default="")}',
#         'HOST': f'{env('POSTGRES_DB_HOST', default="")}',
#         'PORT': f'{env('POSTGRES_DB_PORT', default="")}',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# REST FRAMEWORK

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'ms_app_manage_auth.authentication.MongoTokenAuthentication',  
#     ],
# }


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
BASE_DIR_STATIC = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BACKUP_DIR = os.path.join(BASE_DIR, 'backup')

MEDIA_URL = '/backup/'
MEDIA_ROOT = BACKUP_DIR

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST FRAMEWORK

FRONTEND_URL = env('FRONTEND_URL', default='')

# Celery

CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='')
CELERY_TASKS_DELAY = env('CELERY_TASKS_DELAY', default=5)
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/New_York'
CELERY_ENABLE_UTC = False

# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# CELERY_BEAT
DAY_OF_WEEK_MONDAY_TO_SATURDAY = env('DAY_OF_WEEK_MONDAY_TO_SATURDAY', default='mon-sat')
DAY_OF_WEEK_SUNDAY = env('DAY_OF_WEEK_SUNDAY', default='sun')

# CELERY_BEAT SHIPMENTS, SALES ORDERS, INVOICES
MINUTE_ZOHO_SALES_MONDAY_TO_SATURDAY = env('MINUTE_ZOHO_SALES_MONDAY_TO_SATURDAY', default='*/5')
HOUR_ZOHO_SALES_MONDAY_TO_SATURDAY = env('HOUR_ZOHO_SALES_MONDAY_TO_SATURDAY', default='7-17')
MINUTE_ZOHO_SALES_SUNDAY = env('MINUTE_ZOHO_SALES_SUNDAY', default=0)
HOUR_ZOHO_SALES_SUNDAY = env('HOUR_ZOHO_SALES_SUNDAY', default='*/6')

CRONTAB_ZOHO_SALES_MONDAY_TO_SATURDAY = crontab(
    minute=MINUTE_ZOHO_SALES_MONDAY_TO_SATURDAY, 
    hour=HOUR_ZOHO_SALES_MONDAY_TO_SATURDAY, 
    day_of_week=DAY_OF_WEEK_MONDAY_TO_SATURDAY
)

CRONTAB_ZOHO_SALES_SUNDAY = crontab(
    minute=MINUTE_ZOHO_SALES_SUNDAY,
    hour=HOUR_ZOHO_SALES_SUNDAY,
    day_of_week=DAY_OF_WEEK_SUNDAY
)

# CUSTOMERS, ITEMS
MINUTE_ZOHO_CUSTOMERS_ITEMS_MONDAY_TO_SATURDAY = env('MINUTE_ZOHO_CUSTOMERS_ITEMS_MONDAY_TO_SATURDAY', default='*/59')
HOUR_ZOHO_CUSTOMERS_ITEMS_MONDAY_TO_SATURDAY = env('HOUR_ZOHO_CUSTOMERS_ITEMS_MONDAY_TO_SATURDAY', default='7-17')
MINUTE_ZOHO_CUSTOMERS_ITEMS_SUNDAY = env('MINUTE_ZOHO_CUSTOMERS_ITEMS_SUNDAY', default=30)
HOUR_ZOHO_CUSTOMERS_ITEMS_SUNDAY = env('HOUR_ZOHO_CUSTOMERS_ITEMS_SUNDAY', default='*/12')

CRONTAB_ZOHO_CUSTOMERS_ITEMS_MONDAY_TO_SATURDAY = crontab(
    minute=MINUTE_ZOHO_CUSTOMERS_ITEMS_MONDAY_TO_SATURDAY, 
    hour=HOUR_ZOHO_CUSTOMERS_ITEMS_MONDAY_TO_SATURDAY, 
    day_of_week=DAY_OF_WEEK_MONDAY_TO_SATURDAY
)

CRONTAB_ZOHO_CUSTOMERS_ITEMS_SUNDAY = crontab(
    minute=MINUTE_ZOHO_CUSTOMERS_ITEMS_SUNDAY,
    hour=HOUR_ZOHO_CUSTOMERS_ITEMS_SUNDAY,
    day_of_week=DAY_OF_WEEK_SUNDAY
)

# SENITRON
MINUTE_SENITRON_MONDAY_TO_SATURDAY = env('MINUTE_SENITRON_MONDAY_TO_SATURDAY', default='*/10')
HOUR_SENITRON_MONDAY_TO_SATURDAY = env('HOUR_SENITRON_MONDAY_TO_SATURDAY', default='7-17')
MINUTE_SENITRON_SUNDAY = env('MINUTE_SENITRON_SUNDAY', default=5)
HOUR_SENITRON_SUNDAY = env('HOUR_SENITRON_SUNDAY', default='*/2')

CRONTAB_SENITRON_MONDAY_TO_SATURDAY = crontab(
    minute=MINUTE_SENITRON_MONDAY_TO_SATURDAY,
    hour=HOUR_SENITRON_MONDAY_TO_SATURDAY,
    day_of_week=DAY_OF_WEEK_MONDAY_TO_SATURDAY
)

CRONTAB_SENITRON_SUNDAY = crontab(
    minute=MINUTE_SENITRON_SUNDAY,
    hour=HOUR_SENITRON_SUNDAY,
    day_of_week=DAY_OF_WEEK_SUNDAY
)

# SCHEDULES
CELERY_BEAT_SCHEDULE = {
    # MONDAY_TO_SATURDAY
    'run-task-sequence-zoho-sales-monday-saturday': {
        'task': 'ms_load_sequence_tasks.tasks.task_sequence_by_zoho_sales',
        'schedule': CRONTAB_ZOHO_SALES_MONDAY_TO_SATURDAY,
    },
    'run-task-sequence-senitron-monday-saturday': {
        'task': 'ms_load_sequence_tasks.tasks.task_sequence_by_senitron',
        'schedule': CRONTAB_SENITRON_MONDAY_TO_SATURDAY,
    },
    'run-task-sequence-zoho-customers-items-monday-saturday': {
        'task': 'ms_load_sequence_tasks.tasks.task_sequence_by_customers_items',
        'schedule': CRONTAB_ZOHO_CUSTOMERS_ITEMS_MONDAY_TO_SATURDAY,
    },

    # SUNDAY
    'run-task-sequence-zoho-sales-sunday': {
        'task': 'ms_load_sequence_tasks.tasks.task_sequence_by_zoho_sales',
        'schedule': CRONTAB_ZOHO_SALES_SUNDAY,
    },
    'run-task-sequence-senitron-sunday': {
        'task': 'ms_load_sequence_tasks.tasks.task_sequence_by_senitron',
        'schedule': CRONTAB_SENITRON_SUNDAY,
    },
    'run-task-sequence-zoho-customers-items-sunday': {
        'task': 'ms_load_sequence_tasks.tasks.task_sequence_by_customers_items',
        'schedule': CRONTAB_ZOHO_CUSTOMERS_ITEMS_SUNDAY,
    },
    
}

# MONGOENGINE

warnings.filterwarnings("ignore", message="MongoClient opened before fork")

MONGO_HOST = env('MONGO_HOST', default='localhost')
MONGO_PORT = int(env('MONGO_PORT', default=27017))
MONGO_USER = env('MONGO_USER', default='root')
MONGO_PASSWORD = env('MONGO_PASSWORD', default='')
MONGO_DB = env('MONGO_DB', default='')
connect_mongo_dev()
# MONGO_URI = env('MONGO_URI', default='') if ENVIRONMENT == 'DEV' else (
#     f"mongodb://{urllib.parse.quote(MONGO_USER)}:{urllib.parse.quote(MONGO_PASSWORD)}"
#     f"@{MONGO_HOST}:{MONGO_PORT}/{MONGO_DB}?ssl=true&retryWrites=false"
# )

# if ENVIRONMENT == 'DEV':
#     connect_mongo_dev()
# else:
#     connect_mongo_prod()

# ZOHO

ZOHO_SCOPES = env.list('ZOHO_SCOPES', default=[])
ZOHO_TOKEN_URL = env('ZOHO_TOKEN_URL', default='')
ZOHO_AUTH_URL = env('ZOHO_AUTH_URL', default='')
ZOHO_INVENTORY_ITEMS_URL = env('ZOHO_INVENTORY_ITEMS_URL', default='')
ZOHO_INVENTORY_SHIPMENTORDERS_URL = env('ZOHO_INVENTORY_SHIPMENTORDERS_URL', default='')
ZOHO_INVENTORY_PURCHASERECEIVES_URL = env('ZOHO_INVENTORY_PURCHASERECEIVES_URL', default='')
ZOHO_INVENTORY_SALESORDERS_URL = env('ZOHO_INVENTORY_SALESORDERS_URL', default='')
ZOHO_INVENTORY_SHIPMENTS_URL = env('ZOHO_INVENTORY_SHIPMENTS_URL', default='')
ZOHO_INVENTORY_PACKAGES_URL = env('ZOHO_INVENTORY_PACKAGES_URL', default='')
ZOHO_BOOKS_INVOICES_URL = env('ZOHO_BOOKS_INVOICES_URL', default='')
ZOHO_BOOKS_CUSTOMERS_URL = env('ZOHO_BOOKS_CUSTOMERS_URL', default='')
ZOHO_BOOKS_ITEMS_URL = env('ZOHO_BOOKS_ITEMS_URL', default='')

# SENITRON
API_KEY_SENITRON = env('API_KEY_SENITRON', default='')
API_SENITRON_QUANTITIES_URL = env('API_SENITRON_QUANTITIES_URL', default='')
API_SENITRON_ASSETS_URL = env('API_SENITRON_ASSETS_URL', default='')
API_SENITRON_ASSETS_LOGS_URL = env('API_SENITRON_ASSETS_LOGS_URL', default='')