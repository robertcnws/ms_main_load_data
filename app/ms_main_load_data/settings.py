"""
Django settings for ms-main-load-data project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
import mongoengine


load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1hh=deea+j$skklj#g%n)f0f3l=)%no&9qv+&r9j-p+%1o8$tu'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost', 
    '127.0.0.1',
]

CSRF_TRUSTED_ORIGINS = [
    'https://localhost',
    'https://127.0.0.1',
    'https://127.0.0.1:444',
]

CSRF_COOKIE_SECURE = False  

CSRF_COOKIE_NAME = 'csrftoken'

CSRF_COOKIE_HTTPONLY = False

CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'

CSRF_COOKIE_SAMESITE = 'Lax'

SESSION_COOKIE_SECURE = False  

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    "https://localhost",
    "https://127.0.0.1",
    "https://127.0.0.1:444",
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]

CORS_ALLOW_HEADERS = [
    'Authorization',
    'Content-Type',
    'Accept',
    'x-requested-with',
    'accept',
    'origin',
    'user-agent',
    'dnt',
    'cache-control',
    'X-CSRFToken',
    'x-requested-with',
    'x-xsrf-token',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'rest_framework',
    'rest_framework_mongoengine',
    'ms_load_from_zoho',
    'ms_app_manage_auth',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    'ms_app_manage_auth.middleware.MongoAuthMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'ms_app_manage_auth.backends.MongoDBBackend',
    # 'django.contrib.auth.backends.ModelBackend',
]

# AUTH_USER_MODEL = 'ms_app_manage_auth.CustomUser'

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

ROOT_URLCONF = 'ms_main_load_data.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ms_main_load_data.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': f'{os.getenv('POSTGRES_DB_ENGINE', 'django.db.backends.postgresql')}',
        'NAME': f'{os.getenv('POSTGRES_DB_NAME', '')}',
        'USER': f'{os.getenv('POSRGRES_DB_USER', '')}',
        'PASSWORD': f'{os.getenv('POSTGRES_DB_PASSWORD', '')}',
        'HOST': f'{os.getenv('POSTGRES_DB_HOST', '')}',
        'PORT': f'{os.getenv('POSTGRES_DB_PORT', '')}',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
BASE_DIR_STATIC = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BACKUP_DIR = os.path.join(BASE_DIR, 'backup')

MEDIA_URL = '/backup/'
MEDIA_ROOT = BACKUP_DIR

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MONGO_HOST = os.getenv('MONGO_HOST', '')
MONGO_PORT = int(os.getenv('MONGO_PORT', 27017))
MONGO_USER = os.getenv('MONGO_USER', 'root')
MONGO_PASSWORD = os.getenv('MONGO_PASSWORD', '')
MONGO_DB = os.getenv('MONGO_DB', '')
MONGO_URI = os.getenv('MONGO_URI', '')

mongoengine.connect(
    db=MONGO_DB,
    host=MONGO_HOST,
    port=MONGO_PORT,
    username=MONGO_USER,
    password=MONGO_PASSWORD,
    authentication_source='admin'
)

# Celery

CELERY_BROKER_URL = 'redis://redis_main_load_data:6379/0'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_RESULT_BACKEND = 'redis://redis_main_load_data:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/New_York'
CELERY_ENABLE_UTC = False

# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# CELERY_BEAT_SCHEDULE = {
#     # Lunes a SÃ¡bado
#     'run-task-sequence-every-2-min-mon-sat': {
#         'task': 'api_project_zoho_senitron_async_sequence.tasks.task_sequence_2_min',
#         'schedule': crontab(minute='*/2', hour='7-17', day_of_week='mon-sat'),
#     },
#     'run-task-sequence-every-45-min-mon-sat': {
#         'task': 'api_project_zoho_senitron_async_sequence.tasks.task_sequence_45_min',
#         'schedule': crontab(minute='*/45', hour='7-17', day_of_week='mon-sat'),
#     },

#     # Domingo
#     'run-task-sequence-every-2-hours-sun': {
#         'task': 'api_project_zoho_senitron_async_sequence.tasks.task_sequence_2_min',
#         'schedule': crontab(minute=0, hour='*/2', day_of_week='sun'),
#     },
#     'run-task-sequence-every-2-hours-sun-45-min': {
#         'task': 'api_project_zoho_senitron_async_sequence.tasks.task_sequence_45_min',
#         'schedule': crontab(minute=0, hour='*/2', day_of_week='sun'),
#     },
#     # General Tasks
#     'call-task-remove-old-senitron-items-assets-logs-every-day-8am': {
#         'task': 'api_senitron.tasks.task_remove_old_senitron_items_assets_logs',
#         'schedule': crontab(hour=8, minute=0),
#     },
#     'call-task-remove-old-notifications-every-day-8am': {
#         'task': 'api_senitron.tasks.task_remove_old_notifications',
#         'schedule': crontab(hour=8, minute=30),
#     },
# }
